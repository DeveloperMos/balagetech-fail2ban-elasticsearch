@define elastic_host "172.22.0.40:9200"

filter f_fail2ban {
    program("fail2ban-server");
};

filter f_fail2ban_messages {
    match('Ban' value("MESSAGE"))
    or
    match('Found' value("MESSAGE"));
};

parser p_patterndb {
    db_parser(
        file("/etc/syslog-ng/patterndb.xml")
    );
};

template t_fail2ban {
    template("$(format-json --pair @timestamp=$ISODATE --pair message=$MESSAGE --pair tags=fail2ban --pair ecs.version=1.0.0 --key process.* --key source.* --key host.* --key service.*)\n");
};

destination d_fail2ban_file {
    file(
        "/var/log/geoip2-test.json"
        template("$(template t_fail2ban)")
    );
};

parser p_fail2ban {
    map-value-pairs(
        pair("host.name",               "${HOST}")      # keyword
        pair("host.ip",                 "${SOURCEIP}")  # ip
        pair("process.name",            "${PROGRAM}")   # keyword
        pair("process.pid",             "${PID}")       # long
        pair("source.address",          "${ip}")        # keyword (reverse dns?)
        pair("source.ip",               "${ip}")        # ip
        pair("service.name",            "${jail}")      # keyword
    );
    geoip2(
        "${source.ip}",
        prefix( "geo." )
        database( "/etc/syslog-ng/GeoLite2-City.mmdb" )
    );
    map-value-pairs(
        pair("source.geo.city_name",           "${geo.city.names.en}")
        pair("source.geo.continent_name",      "${geo.continent.names.en}")
        pair("source.geo.country_iso_code",    "${geo.country.iso_code}")
        pair("source.geo.country_name",        "${geo.country.names.en}")
        pair("source.geo.region_iso_code",     "${geo.subdivisions.0.iso_code}")
        pair("source.geo.region_name",         "${geo.subdivisions.0.names.en}")
        pair("source.geo.location",            "${geo.location.latitude},${geo.location.longitude}")
    );
};

destination d_elastic_fail2ban {
    elasticsearch-http(
        url("http://`elastic_host`/_bulk")
        index("fail2ban-${S_YEAR}-${S_MONTH}-${S_DAY}")
        headers("Content-Type: application/x-ndjson")
#        time-zone("UTC")
        type("")
        workers(4)
        batch-lines(16)
        timeout(10)
        template("$(template t_fail2ban)")
#        body_suffix("\n")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
        )
        persist-name("fail2ban")
        log-fifo-size(20000)
    );
};

log {
    source(src);
    filter(f_fail2ban);
    filter(f_fail2ban_messages);
    parser(p_patterndb);
    parser(p_fail2ban);
#    destination(d_fail2ban_file);
    destination(d_elastic_fail2ban);
};
